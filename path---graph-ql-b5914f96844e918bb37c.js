webpackJsonp([60847963602312],{340:function(e,n){e.exports={data:{markdownRemark:{html:'<h1>GraphQL</h1>\n<p>The GraphQL specification is edited in the markdown files found in <a href="./spec"><code>/spec</code></a>\nthe latest release of which is published at <a href="http://facebook.github.io/graphql/">http://facebook.github.io/graphql/</a>.</p>\n<p>The latest draft specification can be found at <a href="http://facebook.github.io/graphql/draft/">http://facebook.github.io/graphql/draft/</a>\nwhich tracks the latest commit to the master branch in this repository.</p>\n<p>Previous releases of the GraphQL specification can be found at permalinks that\nmatch their <a href="https://github.com/facebook/graphql/releases">release tag</a>. For\nexample, <a href="http://facebook.github.io/graphql/October2016/">http://facebook.github.io/graphql/October2016/</a>. If you are linking\ndirectly to the GraphQL specification, it\'s best to link to a tagged permalink\nfor the particular referenced version.</p>\n<h2>Overview</h2>\n<p>This is a Working Draft of the Specification for GraphQL, a query language for APIs created by Facebook.</p>\n<p>The target audience for this specification is not the client developer, but those who have,\nor are actively interested in, building their own GraphQL implementations and\ntools.</p>\n<p>In order to be broadly adopted, GraphQL will have to target a wide\nvariety of backends, frameworks, and languages, which will necessitate a\ncollaborative effort across projects and organizations. This specification serves as a point of coordination for this effort.</p>\n<p>Looking for help? Find resources <a href="http://graphql.org/community/">from the community</a>.</p>\n<h2>Getting Started</h2>\n<p>GraphQL consists of a type system, query language and execution semantics,\nstatic validation, and type introspection, each outlined below. To guide you\nthrough each of these components, we\'ve written an example designed to\nillustrate the various pieces of GraphQL.</p>\n<p>This example is not comprehensive, but it is designed to quickly introduce\nthe core concepts of GraphQL, to provide some context before diving into\nthe more detailed specification or the <a href="https://github.com/graphql/graphql-js">GraphQL.js</a>\nreference implementation.</p>\n<p>The premise of the example is that we want to use GraphQL to query for\ninformation about characters and locations in the original Star Wars\ntrilogy.</p>\n<h3>Type System</h3>\n<p>At the heart of any GraphQL implementation is a description of what types\nof objects it can return, described in a GraphQL type system and returned\nin the GraphQL Schema.</p>\n<p>For our Star Wars example, the\n<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsSchema.js">starWarsSchema.js</a>\nfile in GraphQL.js defines this type system.</p>\n<p>The most basic type in the system will be <code>Human</code>, representing characters\nlike Luke, Leia, and Han. All humans in our type system will have a name,\nso we define the <code>Human</code> type to have a field called "name". This returns\na String, and we know that it is not null (since all <code>Human</code>s have a name),\nso we will define the "name" field to be a non-nullable String. Using a\nshorthand notation that we will use throughout the spec and documentation,\nwe would describe the human type as:</p>\n<pre><code class="language-graphql">type Human {\n  name: String\n}\n</code></pre>\n<p>This shorthand is convenient for describing the basic shape of a type\nsystem; the JavaScript implementation is more full-featured, and allows types\nand fields to be documented. It also sets up the mapping between the\ntype system and the underlying data; for a test case in GraphQL.js, the\nunderlying data is a <a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsData.js">set of JavaScript objects</a>,\nbut in most cases the backing data will be accessed through some service, and\nthis type system layer will be responsible for mapping from types and fields to\nthat service.</p>\n<p>A common pattern in many APIs, and indeed in GraphQL is to give\nobjects an ID that can be used to refetch the object. So let\'s add\nthat to our Human type. We\'ll also add a string for their home\nplanet.</p>\n<pre><code class="language-graphql">type Human {\n  id: String\n  name: String\n  homePlanet: String\n}\n</code></pre>\n<p>Since we\'re talking about the Star Wars trilogy, it would be useful\nto describe the episodes in which each character appears. To do so, we\'ll\nfirst define an enum, which lists the three episodes in the trilogy:</p>\n<pre><code class="language-graphql">enum Episode { NEWHOPE, EMPIRE, JEDI }\n</code></pre>\n<p>Now we want to add a field to <code>Human</code> describing what episodes they\nwere in. This will return a list of <code>Episode</code>s:</p>\n<pre><code class="language-graphql">type Human {\n  id: String\n  name: String\n  appearsIn: [Episode]\n  homePlanet: String\n}\n</code></pre>\n<p>Now, let\'s introduce another type, <code>Droid</code>:</p>\n<pre><code class="language-graphql">type Droid {\n  id: String\n  name: String\n  appearsIn: [Episode]\n  primaryFunction: String\n}\n</code></pre>\n<p>Now we have two types! Let\'s add a way of going between them: humans\nand droids both have friends. But humans can be friends with both\nhumans and droids. How do we refer to either a human or a droid?</p>\n<p>If we look, we note that there\'s common functionality between\nhumans and droids; they both have IDs, names, and episodes in which\nthey appear. So we\'ll add an interface, <code>Character</code>, and make\nboth <code>Human</code> and <code>Droid</code> implement it. Once we have that, we can\nadd the <code>friends</code> field, that returns a list of <code>Character</code>s.</p>\n<p>Our type system so far is:</p>\n<pre><code class="language-graphql">enum Episode { NEWHOPE, EMPIRE, JEDI }\n\ninterface Character {\n  id: String\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n}\n\ntype Human implements Character {\n  id: String\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n  homePlanet: String\n}\n\ntype Droid implements Character {\n  id: String\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n  primaryFunction: String\n}\n</code></pre>\n<p>One question we might ask, though, is whether any of those fields can return\n<code>null</code>. By default, <code>null</code> is a permitted value for any type in GraphQL,\nsince fetching data to fulfill a GraphQL query often requires talking\nto different services that may or may not be available. However, if the\ntype system can guarantee that a type is never null, then we can mark\nit as Non Null in the type system. We indicate that in our shorthand\nby adding an "!" after the type. We can update our type system to note\nthat the <code>id</code> is never null.</p>\n<p>Note that while in our current implementation, we can guarantee that more\nfields are non-null (since our current implementation has hard-coded data),\nwe didn\'t mark them as non-null. One can imagine we would eventually\nreplace our hardcoded data with a backend service, which might not be\nperfectly reliable; by leaving these fields as nullable, we allow\nourselves the flexibility to eventually return null to indicate a backend\nerror, while also telling the client that the error occurred.</p>\n<pre><code class="language-graphql">enum Episode { NEWHOPE, EMPIRE, JEDI }\n\ninterface Character {\n  id: String!\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n}\n\ntype Human implements Character {\n  id: String!\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n  homePlanet: String\n}\n\ntype Droid implements Character {\n  id: String!\n  name: String\n  friends: [Character]\n  appearsIn: [Episode]\n  primaryFunction: String\n}\n</code></pre>\n<p>We\'re missing one last piece: an entry point into the type system.</p>\n<p>When we define a schema, we define an object type that is the basis for all\nqueries. The name of this type is <code>Query</code> by convention, and it describes\nour public, top-level API. Our <code>Query</code> type for this example will look like\nthis:</p>\n<pre><code class="language-graphql">type Query {\n  hero(episode: Episode): Character\n  human(id: String!): Human\n  droid(id: String!): Droid\n}\n</code></pre>\n<p>In this example, there are three top-level operations\nthat can be done on our schema:</p>\n<ul>\n<li><code>hero</code> returns the <code>Character</code> who is the hero of the Star Wars trilogy; it\ntakes an optional argument that allows us to fetch the hero of a specific\nepisode instead.</li>\n<li><code>human</code> accepts a non-null string as a query argument, a human\'s ID, and\nreturns the human with that ID.</li>\n<li><code>droid</code> does the same for droids.</li>\n</ul>\n<p>These fields demonstrate another feature of the type system, the ability\nfor a field to specify arguments that configure their behavior.</p>\n<p>When we package the whole type system together, defining the <code>Query</code> type\nabove as our entry point for queries, this creates a GraphQL Schema.</p>\n<p>This example just scratched the surface of the type system. The specification\ngoes into more detail about this topic in the "Type System" section, and the <a href="https://github.com/graphql/graphql-js/blob/master/src/type">type</a>\ndirectory in GraphQL.js contains code implementing\na specification-compliant GraphQL type system.</p>\n<h3>Query Syntax</h3>\n<p>GraphQL queries declaratively describe what data the issuer wishes\nto fetch from whoever is fulfilling the GraphQL query.</p>\n<p>For our Star Wars example, the\n<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsQuery-test.js">starWarsQueryTests.js</a>\nfile in the GraphQL.js repository contains a number of queries and responses.\nThat file is a test file that uses the schema discussed above and a set of\nsample data, located in\n<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsData.js">starWarsData.js</a>.\nThis test file can be run to exercise the reference implementation.</p>\n<p>An example query on the above schema would be:</p>\n<pre><code class="language-graphql">query HeroNameQuery {\n  hero {\n    name\n  }\n}\n</code></pre>\n<p>The initial line, <code>query HeroNameQuery</code>, defines a query with the operation\nname <code>HeroNameQuery</code> that starts with the schema\'s root query type; in this\ncase, <code>Query</code>. As defined above, <code>Query</code> has a <code>hero</code> field that returns a\n<code>Character</code>, so we\'ll query for that. <code>Character</code> then has a <code>name</code> field that\nreturns a <code>String</code>, so we query for that, completing our query. The result of\nthis query would then be:</p>\n<pre><code class="language-json">{\n  "hero": {\n    "name": "R2-D2"\n  }\n}\n</code></pre>\n<p>Specifying the <code>query</code> keyword and an operation name is only required when a\nGraphQL document defines multiple operations. We therefore could have written\nthe previous query with the query shorthand:</p>\n<pre><code class="language-graphql">{\n  hero {\n    name\n  }\n}\n</code></pre>\n<p>Assuming that the backing data for the GraphQL server identified R2-D2 as the\nhero. The response continues to vary based on the request; if we asked for\nR2-D2\'s ID and friends with this query:</p>\n<pre><code class="language-graphql">query HeroNameAndFriendsQuery {\n  hero {\n    id\n    name\n    friends {\n      id\n      name\n    }\n  }\n}\n</code></pre>\n<p>then we\'ll get back a response like this:</p>\n<pre><code class="language-json">{\n  "hero": {\n    "id": "2001",\n    "name": "R2-D2",\n    "friends": [\n      {\n        "id": "1000",\n        "name": "Luke Skywalker"\n      },\n      {\n        "id": "1002",\n        "name": "Han Solo"\n      },\n      {\n        "id": "1003",\n        "name": "Leia Organa"\n      }\n    ]\n  }\n}\n</code></pre>\n<p>One of the key aspects of GraphQL is its ability to nest queries. In the\nabove query, we asked for R2-D2\'s friends, but we can ask for more information\nabout each of those objects. So let\'s construct a query that asks for R2-D2\'s\nfriends, gets their name and episode appearances, then asks for each of <em>their</em>\nfriends.</p>\n<pre><code class="language-graphql">query NestedQuery {\n  hero {\n    name\n    friends {\n      name\n      appearsIn\n      friends {\n        name\n      }\n    }\n  }\n}\n</code></pre>\n<p>which will give us the nested response</p>\n<pre><code class="language-json">{\n  "hero": {\n    "name": "R2-D2",\n    "friends": [\n      {\n        "name": "Luke Skywalker",\n        "appearsIn": ["NEWHOPE", "EMPIRE", "JEDI"],\n        "friends": [\n          { "name": "Han Solo" },\n          { "name": "Leia Organa" },\n          { "name": "C-3PO" },\n          { "name": "R2-D2" }\n        ]\n      },\n      {\n        "name": "Han Solo",\n        "appearsIn": ["NEWHOPE", "EMPIRE", "JEDI"],\n        "friends": [\n          { "name": "Luke Skywalker" },\n          { "name": "Leia Organa" },\n          { "name": "R2-D2" }\n        ]\n      },\n      {\n        "name": "Leia Organa",\n        "appearsIn": ["NEWHOPE", "EMPIRE", "JEDI"],\n        "friends": [\n          { "name": "Luke Skywalker" },\n          { "name": "Han Solo" },\n          { "name": "C-3PO" },\n          { "name": "R2-D2" }\n        ]\n      }\n    ]\n  }\n}\n</code></pre>\n<p>The <code>Query</code> type above defined a way to fetch a human given their\nID. We can use it by hardcoding the ID in the query:</p>\n<pre><code class="language-graphql">query FetchLukeQuery {\n  human(id: "1000") {\n    name\n  }\n}\n</code></pre>\n<p>to get</p>\n<pre><code class="language-json">{\n  "human": {\n    "name": "Luke Skywalker"\n  }\n}\n</code></pre>\n<p>Alternately, we could have defined the query to have a query parameter:</p>\n<pre><code class="language-graphql">query FetchSomeIDQuery($someId: String!) {\n  human(id: $someId) {\n    name\n  }\n}\n</code></pre>\n<p>This query is now parameterized by <code>$someId</code>; to run it, we must provide\nthat ID. If we ran it with <code>$someId</code> set to "1000", we would get Luke;\nset to "1002", we would get Han. If we passed an invalid ID here,\nwe would get <code>null</code> back for the <code>human</code>, indicating that no such object\nexists.</p>\n<p>Notice that the key in the response is the name of the field, by default.\nIt is sometimes useful to change this key, for clarity or to avoid key\ncollisions when fetching the same field with different arguments.</p>\n<p>We can do that with field aliases, as demonstrated in this query:</p>\n<pre><code class="language-graphql">query FetchLukeAliased {\n  luke: human(id: "1000") {\n    name\n  }\n}\n</code></pre>\n<p>We aliased the result of the <code>human</code> field to the key <code>luke</code>. Now the response\nis:</p>\n<pre><code class="language-json">{\n  "luke": {\n    "name": "Luke Skywalker"\n  }\n}\n</code></pre>\n<p>Notice the key is "luke" and not "human", as it was in our previous example\nwhere we did not use the alias.</p>\n<p>This is particularly useful if we want to use the same field twice\nwith different arguments, as in the following query:</p>\n<pre><code class="language-graphql">query FetchLukeAndLeiaAliased {\n  luke: human(id: "1000") {\n    name\n  }\n  leia: human(id: "1003") {\n    name\n  }\n}\n</code></pre>\n<p>We aliased the result of the first <code>human</code> field to the key\n<code>luke</code>, and the second to <code>leia</code>. So the result will be:</p>\n<pre><code class="language-json">{\n  "luke": {\n    "name": "Luke Skywalker"\n  },\n  "leia": {\n    "name": "Leia Organa"\n  }\n}\n</code></pre>\n<p>Now imagine we wanted to ask for Luke and Leia\'s home planets. We could do so\nwith this query:</p>\n<pre><code class="language-graphql">query DuplicateFields {\n  luke: human(id: "1000") {\n    name\n    homePlanet\n  }\n  leia: human(id: "1003") {\n    name\n    homePlanet\n  }\n}\n</code></pre>\n<p>but we can already see that this could get unwieldy, since we have to add new\nfields to both parts of the query. Instead, we can extract out the common fields\ninto a fragment, and include the fragment in the query, like this:</p>\n<pre><code class="language-graphql">query UseFragment {\n  luke: human(id: "1000") {\n    ...HumanFragment\n  }\n  leia: human(id: "1003") {\n    ...HumanFragment\n  }\n}\n\nfragment HumanFragment on Human {\n  name\n  homePlanet\n}\n</code></pre>\n<p>Both of those queries give this result:</p>\n<pre><code class="language-json">{\n  "luke": {\n    "name": "Luke Skywalker",\n    "homePlanet": "Tatooine"\n  },\n  "leia": {\n    "name": "Leia Organa",\n    "homePlanet": "Alderaan"\n  }\n}\n</code></pre>\n<p>The <code>UseFragment</code> and <code>DuplicateFields</code> queries will both get the same result, but\n<code>UseFragment</code> is less verbose; if we wanted to add more fields, we could add\nit to the common fragment rather than copying it into multiple places.</p>\n<p>We defined the type system above, so we know the type of each object\nin the output; the query can ask for that type using the special\nfield <code>__typename</code>, defined on every object.</p>\n<pre><code class="language-graphql">query CheckTypeOfR2 {\n  hero {\n    __typename\n    name\n  }\n}\n</code></pre>\n<p>Since R2-D2 is a droid, this will return</p>\n<pre><code class="language-json">{\n  "hero": {\n    "__typename": "Droid",\n    "name": "R2-D2"\n  }\n}\n</code></pre>\n<p>This was particularly useful because <code>hero</code> was defined to return a <code>Character</code>,\nwhich is an interface; we might want to know what concrete type was actually\nreturned. If we instead asked for the hero of Episode V:</p>\n<pre><code class="language-graphql">query CheckTypeOfLuke {\n  hero(episode: EMPIRE) {\n    __typename\n    name\n  }\n}\n</code></pre>\n<p>We would find that it was Luke, who is a Human:</p>\n<pre><code class="language-json">{\n  "hero": {\n    "__typename": "Human",\n    "name": "Luke Skywalker"\n  }\n}\n</code></pre>\n<p>As with the type system, this example just scratched the surface of the query\nlanguage. The specification goes into more detail about this topic in the\n"Language" section, and the\n<a href="https://github.com/graphql/graphql-js/blob/master/src/language">language</a>\ndirectory in GraphQL.js contains code implementing a\nspecification-compliant GraphQL query language parser and lexer.</p>\n<h3>Validation</h3>\n<p>By using the type system, it can be predetermined whether a GraphQL query\nis valid or not. This allows servers and clients to effectively inform\ndevelopers when an invalid query has been created, without having to rely\non runtime checks.</p>\n<p>For our Star Wars example, the file\n<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsValidation-test.js">starWarsValidationTests.js</a>\ncontains a number of queries demonstrating various invalidities, and is a test\nfile that can be run to exercise the reference implementation\'s validator.</p>\n<p>To start, let\'s take a complex valid query. This is the <code>NestedQuery</code> example\nfrom the above section, but with the duplicated fields factored out into\na fragment:</p>\n<pre><code class="language-graphql">query NestedQueryWithFragment {\n  hero {\n    ...NameAndAppearances\n    friends {\n      ...NameAndAppearances\n      friends {\n        ...NameAndAppearances\n      }\n    }\n  }\n}\n\nfragment NameAndAppearances on Character {\n  name\n  appearsIn\n}\n</code></pre>\n<p>And this query is valid. Let\'s take a look at some invalid queries!</p>\n<p>When we query for fields, we have to query for a field that exists on the\ngiven type. So as <code>hero</code> returns a <code>Character</code>, we have to query for a field\non <code>Character</code>. That type does not have a <code>favoriteSpaceship</code> field, so this\nquery:</p>\n<pre><code class="language-graphql"># INVALID: favoriteSpaceship does not exist on Character\nquery HeroSpaceshipQuery {\n  hero {\n    favoriteSpaceship\n  }\n}\n</code></pre>\n<p>is invalid.</p>\n<p>Whenever we query for a field and it returns something other than a scalar\nor an enum, we need to specify what data we want to get back from the field.\nHero returns a <code>Character</code>, and we\'ve been requesting fields like <code>name</code> and\n<code>appearsIn</code> on it; if we omit that, the query will not be valid:</p>\n<pre><code class="language-graphql"># INVALID: hero is not a scalar, so fields are needed\nquery HeroNoFieldsQuery {\n  hero\n}\n</code></pre>\n<p>Similarly, if a field is a scalar, it doesn\'t make sense to query for\nadditional fields on it, and doing so will make the query invalid:</p>\n<pre><code class="language-graphql"># INVALID: name is a scalar, so fields are not permitted\nquery HeroFieldsOnScalarQuery {\n  hero {\n    name {\n      firstCharacterOfName\n    }\n  }\n}\n</code></pre>\n<p>Earlier, it was noted that a query can only query for fields on the type\nin question; when we query for <code>hero</code> which returns a <code>Character</code>, we\ncan only query for fields that exist on <code>Character</code>. What happens if we\nwant to query for R2-D2s primary function, though?</p>\n<pre><code class="language-graphql"># INVALID: primaryFunction does not exist on Character\nquery DroidFieldOnCharacter {\n  hero {\n    name\n    primaryFunction\n  }\n}\n</code></pre>\n<p>That query is invalid, because <code>primaryFunction</code> is not a field on <code>Character</code>.\nWe want some way of indicating that we wish to fetch <code>primaryFunction</code> if the\n<code>Character</code> is a <code>Droid</code>, and to ignore that field otherwise. We can use\nthe fragments we introduced earlier to do this. By setting up a fragment defined\non <code>Droid</code> and including it, we ensure that we only query for <code>primaryFunction</code>\nwhere it is defined.</p>\n<pre><code class="language-graphql">query DroidFieldInFragment {\n  hero {\n    name\n    ...DroidFields\n  }\n}\n\nfragment DroidFields on Droid {\n  primaryFunction\n}\n</code></pre>\n<p>This query is valid, but it\'s a bit verbose; named fragments were valuable\nabove when we used them multiple times, but we\'re only using this one once.\nInstead of using a named fragment, we can use an inline fragment; this\nstill allows us to indicate the type we are querying on, but without naming\na separate fragment:</p>\n<pre><code class="language-graphql">query DroidFieldInInlineFragment {\n  hero {\n    name\n    ... on Droid {\n      primaryFunction\n    }\n  }\n}\n</code></pre>\n<p>This has just scratched the surface of the validation system; there\nare a number of validation rules in place to ensure that a GraphQL query\nis semantically meaningful. The specification goes into more detail about this\ntopic in the "Validation" section, and the\n<a href="https://github.com/graphql/graphql-js/blob/master/src/validation">validation</a>\ndirectory in GraphQL.js contains code implementing a\nspecification-compliant GraphQL validator.</p>\n<h3>Introspection</h3>\n<p>It\'s often useful to ask a GraphQL schema for information about what\nqueries it supports. GraphQL allows us to do so using the introspection\nsystem!</p>\n<p>For our Star Wars example, the file\n<a href="https://github.com/graphql/graphql-js/blob/master/src/__tests__/starWarsIntrospection-test.js">starWarsIntrospectionTests.js</a>\ncontains a number of queries demonstrating the introspection system, and is a\ntest file that can be run to exercise the reference implementation\'s\nintrospection system.</p>\n<p>We designed the type system, so we know what types are available, but if\nwe didn\'t, we can ask GraphQL, by querying the <code>__schema</code> field, always\navailable on the root type of a Query. Let\'s do so now, and ask what types\nare available.</p>\n<pre><code class="language-graphql">query IntrospectionTypeQuery {\n  __schema {\n    types {\n      name\n    }\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__schema": {\n    "types": [\n      {\n        "name": "Query"\n      },\n      {\n        "name": "Character"\n      },\n      {\n        "name": "Human"\n      },\n      {\n        "name": "String"\n      },\n      {\n        "name": "Episode"\n      },\n      {\n        "name": "Droid"\n      },\n      {\n        "name": "__Schema"\n      },\n      {\n        "name": "__Type"\n      },\n      {\n        "name": "__TypeKind"\n      },\n      {\n        "name": "Boolean"\n      },\n      {\n        "name": "__Field"\n      },\n      {\n        "name": "__InputValue"\n      },\n      {\n        "name": "__EnumValue"\n      },\n      {\n        "name": "__Directive"\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Wow, that\'s a lot of types! What are they? Let\'s group them:</p>\n<ul>\n<li><strong>Query, Character, Human, Episode, Droid</strong> - These are the ones that we\ndefined in our type system.</li>\n<li><strong>String, Boolean</strong> - These are built-in scalars that the type system\nprovided.</li>\n<li><strong>__Schema, __Type, __TypeKind, __Field, __InputValue, __EnumValue,\n__Directive</strong> - These all are preceded with a double underscore, indicating\nthat they are part of the introspection system.</li>\n</ul>\n<p>Now, let\'s try and figure out a good place to start exploring what queries are\navailable. When we designed our type system, we specified what type all queries\nwould start at; let\'s ask the introspection system about that!</p>\n<pre><code class="language-graphql">query IntrospectionQueryTypeQuery {\n  __schema {\n    queryType {\n      name\n    }\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__schema": {\n    "queryType": {\n      "name": "Query"\n    }\n  }\n}\n</code></pre>\n<p>And that matches what we said in the type system section, that\nthe <code>Query</code> type is where we will start! Note that the naming here\nwas just by convention; we could have named our <code>Query</code> type anything\nelse, and it still would have been returned here if we had specified it\nas the starting type for queries. Naming it <code>Query</code>, though, is a useful\nconvention.</p>\n<p>It is often useful to examine one specific type. Let\'s take a look at\nthe <code>Droid</code> type:</p>\n<pre><code class="language-graphql">query IntrospectionDroidTypeQuery {\n  __type(name: "Droid") {\n    name\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Droid"\n  }\n}\n</code></pre>\n<p>What if we want to know more about Droid, though? For example, is it\nan interface or an object?</p>\n<pre><code class="language-graphql">query IntrospectionDroidKindQuery {\n  __type(name: "Droid") {\n    name\n    kind\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Droid",\n    "kind": "OBJECT"\n  }\n}\n</code></pre>\n<p><code>kind</code> returns a <code>__TypeKind</code> enum, one of whose values is <code>OBJECT</code>. If\nwe asked about <code>Character</code> instead:</p>\n<pre><code class="language-graphql">query IntrospectionCharacterKindQuery {\n  __type(name: "Character") {\n    name\n    kind\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Character",\n    "kind": "INTERFACE"\n  }\n}\n</code></pre>\n<p>We\'d find that it is an interface.</p>\n<p>It\'s useful for an object to know what fields are available, so let\'s\nask the introspection system about <code>Droid</code>:</p>\n<pre><code class="language-graphql">query IntrospectionDroidFieldsQuery {\n  __type(name: "Droid") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n      }\n    }\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Droid",\n    "fields": [\n      {\n        "name": "id",\n        "type": {\n          "name": null,\n          "kind": "NON_NULL"\n        }\n      },\n      {\n        "name": "name",\n        "type": {\n          "name": "String",\n          "kind": "SCALAR"\n        }\n      },\n      {\n        "name": "friends",\n        "type": {\n          "name": null,\n          "kind": "LIST"\n        }\n      },\n      {\n        "name": "appearsIn",\n        "type": {\n          "name": null,\n          "kind": "LIST"\n        }\n      },\n      {\n        "name": "primaryFunction",\n        "type": {\n          "name": "String",\n          "kind": "SCALAR"\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Those are our fields that we defined on <code>Droid</code>!</p>\n<p><code>id</code> looks a bit weird there, it has no name for the type. That\'s\nbecause it\'s a "wrapper" type of kind <code>NON_NULL</code>. If we queried for\n<code>ofType</code> on that field\'s type, we would find the <code>String</code> type there,\ntelling us that this is a non-null String.</p>\n<p>Similarly, both <code>friends</code> and <code>appearsIn</code> have no name, since they are the\n<code>LIST</code> wrapper type. We can query for <code>ofType</code> on those types, which will\ntell us what these are lists of.</p>\n<pre><code class="language-graphql">query IntrospectionDroidWrappedFieldsQuery {\n  __type(name: "Droid") {\n    name\n    fields {\n      name\n      type {\n        name\n        kind\n        ofType {\n          name\n          kind\n        }\n      }\n    }\n  }\n}\n</code></pre>\n<p>and we get back:</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Droid",\n    "fields": [\n      {\n        "name": "id",\n        "type": {\n          "name": null,\n          "kind": "NON_NULL",\n          "ofType": {\n            "name": "String",\n            "kind": "SCALAR"\n          }\n        }\n      },\n      {\n        "name": "name",\n        "type": {\n          "name": "String",\n          "kind": "SCALAR",\n          "ofType": null\n        }\n      },\n      {\n        "name": "friends",\n        "type": {\n          "name": null,\n          "kind": "LIST",\n          "ofType": {\n            "name": "Character",\n            "kind": "INTERFACE"\n          }\n        }\n      },\n      {\n        "name": "appearsIn",\n        "type": {\n          "name": null,\n          "kind": "LIST",\n          "ofType": {\n            "name": "Episode",\n            "kind": "ENUM"\n          }\n        }\n      },\n      {\n        "name": "primaryFunction",\n        "type": {\n          "name": "String",\n          "kind": "SCALAR",\n          "ofType": null\n        }\n      }\n    ]\n  }\n}\n</code></pre>\n<p>Let\'s end with a feature of the introspection system particularly useful\nfor tooling; let\'s ask the system for documentation!</p>\n<pre><code class="language-graphql">query IntrospectionDroidDescriptionQuery {\n  __type(name: "Droid") {\n    name\n    description\n  }\n}\n</code></pre>\n<p>yields</p>\n<pre><code class="language-json">{\n  "__type": {\n    "name": "Droid",\n    "description": "A mechanical creature in the Star Wars universe."\n  }\n}\n</code></pre>\n<p>So we can access the documentation about the type system using introspection,\nand create documentation browsers, or rich IDE experiences.</p>\n<p>This has just scratched the surface of the introspection system; we can\nquery for enum values, what interfaces a type implements, and more. We\ncan even introspect on the introspection system itself. The specification goes\ninto more detail about this topic in the "Introspection" section, and the <a href="https://github.com/graphql/graphql-js/blob/master/src/type/introspection.js">introspection</a>\nfile in GraphQL.js\ncontains code implementing a specification-compliant GraphQL query\nintrospection system.</p>\n<h3>Additional Content</h3>\n<p>This README walked through the GraphQL.js reference implementation\'s type\nsystem, query execution, validation, and introspection systems. There\'s more\nin both <a href="https://github.com/graphql/graphql-js/">GraphQL.js</a> and specification,\nincluding a description and implementation for executing queries, how to format\na response, explaining how a type system maps to an underlying implementation,\nand how to format a GraphQL response, as well as the grammar for GraphQL.</p>',
frontmatter:{title:"GraphQL",tags:["graphs"],summary:"Big things will happen"}}},pathContext:{previous:null,next:{html:'<h1><a href="https://facebook.github.io/react-native/">React Native</a> ·  <a href="https://circleci.com/gh/facebook/react-native"><img src="https://circleci.com/gh/facebook/react-native.svg?style=shield" alt="Circle CI Status"></a> <a href="https://ci.appveyor.com/project/facebok/react-native/branch/master"><img src="https://ci.appveyor.com/api/projects/status/github/facebook/react-native?branch=master&#x26;svg=true" alt="Build status"></a> <a href="https://badge.fury.io/js/react-native"><img src="https://badge.fury.io/js/react-native.svg" alt="npm version"></a> <a href="CONTRIBUTING.md#pull-requests"><img src="https://img.shields.io/badge/PRs-welcome-brightgreen.svg" alt="PRs Welcome"></a></h1>\n<p>Learn once, write anywhere: Build mobile apps with React.</p>\n<ul>\n<li><strong>Build native mobile apps using JavaScript and React:</strong> React Native lets you build mobile apps using only JavaScript. It uses the same design as <a href="https://facebook.github.io/react">React</a>, letting you compose a rich mobile UI from declarative components.</li>\n<li><strong>A React Native app is a real mobile app:</strong> With React Native, you don\'t build a "mobile web app", an "HTML5 app", or a "hybrid app". You build a real mobile app that\'s indistinguishable from an app built using Objective-C, Java, or Swift. React Native uses the same fundamental UI building blocks as regular iOS and Android apps. You just put those building blocks together using JavaScript and React.</li>\n<li><strong>Don\'t waste time recompiling:</strong> React Native lets you build your app faster. Instead of recompiling, you can reload your app instantly. With hot reloading, you can even run new code while retaining your application state. Give it a try - it\'s a magical experience.</li>\n<li><strong>Use native code when you need to:</strong> React Native combines smoothly with components written in Objective-C, Java, or Swift. It\'s simple to drop down to native code if you need to optimize a few aspects of your application. It\'s also easy to build part of your app in React Native, and part of your app using native code directly - that\'s how the Facebook app works.</li>\n</ul>\n<p>The focus of React Native is on developer efficiency across all the platforms you care about - learn once, write anywhere. Facebook uses React Native in multiple production apps and will continue investing in React Native.</p>\n<p>See the official <a href="https://facebook.github.io/react-native/">React Native website</a> for an introduction to React Native.</p>\n<p>Supported operating systems are >= Android 4.1 (API 16) and >= iOS 9.0.</p>\n<ul>\n<li><a href="#getting-started">Getting Started</a></li>\n<li><a href="#documentation">Documentation</a></li>\n<li><a href="#upgrading">Upgrading</a></li>\n<li><a href="#contributing">Contributing</a></li>\n<li><a href="#license">License</a></li>\n</ul>\n<hr>\n<h2>Getting Started</h2>\n<p>Follow the <a href="https://facebook.github.io/react-native/docs/getting-started.html">Getting Started guide</a>. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:</p>\n<ul>\n<li><a href="https://snack.expo.io/BJ-uC-nrb">Trying out React Native</a></li>\n<li><a href="https://facebook.github.io/react-native/docs/getting-started.html">Creating a New Application</a></li>\n<li><a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html">Adding React Native to an Existing Application</a></li>\n</ul>\n<hr>\n<h2>Documentation</h2>\n<p><a href="https://facebook.github.io/react-native/docs/getting-started.html">The website’s documentation</a> is divided into multiple sections.</p>\n<ul>\n<li>There are <strong>Guides</strong> that discuss topics like <a href="https://facebook.github.io/react-native/docs/debugging.html">debugging</a>, <a href="https://facebook.github.io/react-native/docs/integration-with-existing-apps.html">integrating with existing apps</a>, and <a href="https://facebook.github.io/react-native/docs/gesture-responder-system.html">the gesture responder system</a>.</li>\n<li>The <strong>Components</strong> section covers React components such as <a href="https://facebook.github.io/react-native/docs/view.html"><code>View</code></a> and <a href="https://facebook.github.io/react-native/docs/button.html"><code>Button</code></a>.</li>\n<li>The <strong>APIs</strong> section covers other libraries like <a href="https://facebook.github.io/react-native/docs/animated.html">Animated</a> and <a href="https://facebook.github.io/react-native/docs/stylesheet.html">StyleSheet</a> that aren’t React components themselves.</li>\n<li>Finally, React Native provides a small number of <strong>Polyfills</strong> that offer web-like APIs.</li>\n</ul>\n<p>Another great way to learn more about the components and APIs included with React Native is to read their source. Look under the <code>Libraries/Components</code> directory for components like <code>ScrollView</code> and <code>TextInput</code>, for example. The RNTester example is also here to demonstrate some of the ways to use these components. From the source you can get an accurate understanding of each component’s behavior and API.</p>\n<p>The React Native documentation only discusses the components, APIs and topics specific to React Native (React on iOS and Android). For further documentation on the React API that is shared between React Native and React DOM, refer to the <a href="https://facebook.github.io/react/">React documentation</a>.</p>\n<hr>\n<h2>Upgrading</h2>\n<p>React Native is under active development. See the guide on <a href="https://facebook.github.io/react-native/docs/upgrading.html">upgrading React Native</a> to keep your project up-to-date.</p>\n<hr>\n<h2>Contributing</h2>\n<p>Read below to learn how you can take part in improving React Native.</p>\n<h3><a href="https://code.facebook.com/codeofconduct">Code of Conduct</a></h3>\n<p>Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read <a href="https://code.facebook.com/codeofconduct">the full text</a> so that you can understand what actions will and will not be tolerated.</p>\n<h3>Contributing Guide</h3>\n<p>Read our <a href="https://facebook.github.io/react-native/docs/contributing.html">contributing guide</a> to learn about our development process, how to propose bug fixes and improvements, and how to build and test your changes to React Native.</p>\n<h3>Beginner Friendly Bugs</h3>\n<p>We have a list of <a href="https://github.com/facebook/react-native/labels/Good%20first%20issue">beginner friendly issues</a> to help you get your feet wet in the React Native codebase and familiar with our contribution process. This is a great place to get started.</p>\n<hr>\n<h2>License</h2>\n<p>React Native is <a href="./LICENSE">MIT licensed</a>.</p>\n<p>React Native documentation is <a href="./LICENSE-docs">Creative Commons licensed</a>.</p>\n<hr>\n<p><img src="https://avatars2.githubusercontent.com/u/69631?s=200&v=4" width="50"></img></p>',id:"/Users/mario/playground/my-blog/src/pages/2018-09-2-first-draft/index.md absPath of file >>> MarkdownRemark",frontmatter:{path:"/first-draft",title:"The first draft",summary:"Big things will happen",tags:["draft"]}}}}}});
//# sourceMappingURL=path---graph-ql-b5914f96844e918bb37c.js.map